openapi: 3.0.3
info:
  title: Lumen
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /employees:
    get:
      summary: 'Get All Employees'
      operationId: getAllEmployees
      description: 'This endpoint is used to fetch all employees available in the database.'
      parameters:
        -
          in: query
          name: page_size
          description: 'Size per page. Defaults to 5.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Size per page. Defaults to 5.'
            example: 10
        -
          in: query
          name: page
          description: 'Page to view.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Page to view.'
            example: null
      responses:
        401:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized.
      tags:
        - 'Employee Management'
    post:
      summary: 'Create a employee'
      operationId: createAEmployee
      description: 'This endpoint lets you create a employee.'
      parameters: []
      responses: {  }
      tags:
        - 'Employee Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  description: 'The full name of the employee.'
                  example: null
                job:
                  type: string
                  description: 'The id of the job.'
                  example: '1'
                hire_date:
                  type: string
                  description: 'Must be a valid date in the format <code>d-m-Y</code>.'
                  example: 16-11-2023
                gender:
                  type: string
                  description: ''
                  example: L
                  enum:
                    - L
                    - P
                date_of_birth:
                  type: string
                  description: 'Must be a valid date in the format <code>d-m-Y</code>.'
                  example: 16-11-2023
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: dameon72@example.org
                phone:
                  type: string
                  description: 'The phone number of the employee.'
                  example: 0821xxxxxxxx
                address:
                  type: string
                  description: ''
                  example: null
                salary:
                  type: number
                  description: 'The salary of the employee.'
                  example: 8000000.0
              required:
                - full_name
                - hire_date
                - gender
                - date_of_birth
  /jobs:
    get:
      summary: 'Get All Jobs'
      operationId: getAllJobs
      description: 'This endpoint is used to fetch all jobs available in the database.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized.
      tags:
        - 'Employee Management'
  '/employees/{id}':
    get:
      summary: 'Get a Single Employee'
      operationId: getASingleEmployee
      description: 'This endpoint is used to return a single employees from the database.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized.
      tags:
        - 'Employee Management'
    put:
      summary: 'Update a employee'
      operationId: updateAEmployee
      description: 'This endpoint lets you update a employee.'
      parameters: []
      responses: {  }
      tags:
        - 'Employee Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  description: 'The full name of the employee.'
                  example: null
                job:
                  type: string
                  description: 'The id of the job.'
                  example: '1'
                hire_date:
                  type: string
                  description: 'Must be a valid date in the format <code>d-m-Y</code>.'
                  example: 16-11-2023
                gender:
                  type: string
                  description: ''
                  example: L
                  enum:
                    - L
                    - P
                date_of_birth:
                  type: string
                  description: 'Must be a valid date in the format <code>d-m-Y</code>.'
                  example: 16-11-2023
                phone:
                  type: string
                  description: 'The phone number of the employee.'
                  example: 0821xxxxxxxx
                address:
                  type: string
                  description: ''
                  example: null
                salary:
                  type: number
                  description: 'The salary of the employee.'
                  example: 8000000.0
              required:
                - full_name
                - hire_date
                - gender
                - date_of_birth
    delete:
      summary: 'Delete a employee'
      operationId: deleteAEmployee
      description: 'This endpoint lets you delete a employee.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"success\": true,\n \"message\": \"Data berhasil dihapus\",\n}"
      tags:
        - 'Employee Management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the employee.'
        example: E001
        required: true
        schema:
          type: string
  /login:
    post:
      summary: Login
      operationId: login
      description: 'This endpoint is used to login a user to the system.'
      parameters: []
      responses:
        200:
          description: 'Successful Login'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: 'User Login Successfully'
                  access_token: MgowQLkdpShwrb8AI9j1YAGmwnDjAOeE17XrP5nb
                  token_type: bearer
                  expires_in: 86400
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User Login Successfully'
                  access_token:
                    type: string
                    example: MgowQLkdpShwrb8AI9j1YAGmwnDjAOeE17XrP5nb
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 86400
        401:
          description: 'Failed Login'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Invalid login credentials'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Invalid login credentials'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The username you use to log into this system.'
                  example: null
                password:
                  type: string
                  description: 'The password you use to log into this system.'
                  example: null
              required:
                - username
                - password
      security: []
  /me:
    post:
      summary: ''
      operationId: postMe
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  /logout:
    post:
      summary: ''
      operationId: postLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
tags:
  -
    name: 'Employee Management'
    description: "\nAPI to manage the employee resource."
  -
    name: Endpoints
    description: ''
